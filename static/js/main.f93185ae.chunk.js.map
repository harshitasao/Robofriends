{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundaries.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","cardArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundaries","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAiBeA,EAfH,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAQC,EAAO,EAAPA,GAE5B,OAGC,cAFA,CAEA,OAAKC,UAAW,qDAAhB,UACA,qBAAKC,IAAI,MAAMC,IAAG,+BAA0BH,EAA1B,cACf,gCACA,6BAAKF,IACL,4BAAIC,WCSMK,EAhBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZC,EAAYD,EAAME,KAAI,SAACC,EAAKC,GACjC,OAAS,cAAC,EAAD,CACPT,GAAMK,EAAMI,GAAGT,GACfF,KAAQO,EAAMI,GAAGX,KACjBC,MAASM,EAAMI,GAAGV,OAHAM,EAAMI,GAAGT,OAO9B,OACG,8BACCM,KCDUI,EAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,qBAAKV,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACNC,SAAYH,OCELI,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAoBC,OAAO,SAAnE,SACCJ,EAAMK,aCiBMC,E,kDApBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAS,GAHO,E,qDAQnB,SAAkBC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAIzB,WACC,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAKX,MAAMK,a,GAlBWQ,aCqDfC,E,kDA9Cd,aAAc,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAlBvC,EAAKZ,MAAQ,CACZlB,MAAM,GACN4B,YAAY,IAJD,E,qDAQd,WAAoB,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACA,OAAO,EAAKZ,SAAS,CAACvB,MAAMmC,S,oBAUlC,WACC,MAA4Bb,KAAKJ,MAA3BlB,EAAN,EAAMA,MAAO4B,EAAb,EAAaA,YACPQ,EAAgBpC,EAAMqC,QAAO,SAAArC,GACnC,OAAOA,EAAMP,KAAK6C,cAAcC,SAASX,EAAYU,kBAErD,OAAQtC,EAAMwC,OAGb,sBAAK5C,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAgBgB,KAAKI,iBAChC,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,MAASoC,WAPnB,6C,GA/BeZ,aCIHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACI,cAAC,EAAD,IACXC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f93185ae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name , email , id}) =>{\r\n\t// const {name,id,email} =props; // destructuring do either this or the above method\r\n\treturn (\r\n\t\t//jsx code\r\n\r\n\t\t<div className ='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='...' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t   <div>\r\n\t\t   <h2>{name}</h2>\r\n\t\t   <p>{email}</p>\r\n\t\t   </div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//this cardlist is a pure function i.e it is deterministic ,means it always takes same input and gives same kind of output\r\nconst CardList = ({robot}) => {\r\n\tconst cardArray = robot.map((user,i) => {\r\n\t\treturn  (<Card key={robot[i].id} \r\n\t\t\t\tid = {robot[i].id} \r\n\t\t\t\tname = {robot[i].name} \r\n\t\t\t\temail = {robot[i].email}/>\r\n\t\t\t\t);\r\n\t}) ;\r\n\r\n\treturn (\r\n\t\t  <div>\r\n\t\t  {cardArray}\r\n\t\t  </div>\r\n\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"search robots\"\r\n        onChange = {searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border:'1px solid black' , height:'500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t); \r\n};\r\nexport default Scroll;","import React ,{Component} from 'react';\r\n\r\nclass ErrorBoundaries extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\r\ncomponentDidCatch(error,info){\r\n\tthis.setState({hasError:true});\r\n}\r\n\r\n\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Ooops.That is not good</h1>;\r\n\t}\r\n\treturn this.props.children;\r\n}\r\n}\r\nexport default ErrorBoundaries;\r\n","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundaries from '../components/ErrorBoundaries';\r\n\r\n\r\nclass App extends Component  {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobot:[],\r\n\t\t\tsearchfield:''\r\n\r\n\t\t}\r\n\t}\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>{\r\n\t return\tresponse.json();\r\n\t})\r\n\t.then(users => {\r\n       return this.setState({robot:users});\r\n\r\n\t})\r\n}\r\n\r\nonSearchChange = (event) =>{\r\n\tthis.setState({searchfield:event.target.value})\r\n\t\r\n}\r\n\r\n\trender(){\r\n\t\tconst{robot, searchfield} = this.state;\r\n\t\tconst filteredRobot = robot.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\t\treturn !robot.length ?\r\n\t\t <h1>Loading</h1>:\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundaries>\r\n\t\t\t<CardList robot = {filteredRobot}/>\r\n\t\t\t</ErrorBoundaries>\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\r\n\t}\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robot} from './robot';\n\nReactDOM.render(\n             <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}